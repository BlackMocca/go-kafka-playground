version: "3"

services: 

  app:
    build:
      context: ./
      dockerfile: ./Dockerfile-development
    container_name: app
    env_file: .env
    depends_on:
      - psql_db
    networks: 
      - kafkaservice
      - dbservice
    ports:
      - 3000:3000
    volumes:
      - .:/go/src/app
  
  psql_db:
    build:
      dockerfile: ./Dockerfile
      context: ./docker-script/postgres
    restart: always
    container_name: psql_db
    networks: 
      - dbservice
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB_PROD=app_example
      - POSTGRES_DB_TEST=app_example_test

  mongo_db:
    build:
      dockerfile: ./Dockerfile
      context: ./docker-script/mongodb
    container_name: mongo_db
    networks:
      - dbservice
    ports:
      - 27017:27017
    environment:
      - MONGO_USER=mongo
      - MONGO_PASSWORD=mongo
      - MONGO_PROD=app_example
    restart: always

  zookeeper-1:
    image: confluentinc/cp-zookeeper:5.3.1
    container_name: zookeeper-1
    ports: 
      - "22181:22181"
    networks:
      - kafkaservice
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      # ZOOKEEPER_SERVERS: zookeeper-1:22888:23888

  kafka-1:
    image: confluentinc/cp-kafka:5.3.1
    container_name: kafka-1
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper-1
    networks:
      - kafkaservice
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092

  adminer:
    image: adminer
    restart: always
    container_name: adminer
    networks: 
      - dbservice
    ports:
      - 8080:8080

networks:
  dbservice:
    driver: bridge
  kafkaservice:
    driver: bridge